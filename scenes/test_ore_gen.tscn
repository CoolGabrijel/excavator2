[gd_scene load_steps=7 format=3 uid="uid://1gimwflnuwmj"]

[ext_resource type="Resource" uid="uid://d2d151apvlo6d" path="res://ores/Silver.tres" id="1_ud7q6"]
[ext_resource type="Texture2D" uid="uid://sokwkfdicq6o" path="res://textures/stone.png" id="2_ud7q6"]

[sub_resource type="GDScript" id="GDScript_n2hss"]
resource_name = "test_ore_gen"
script/source = "@tool
extends Node2D

@export_tool_button(\"Regen\") var regen = update_gen
@export var ore_to_test : OreGen
@export var size := Vector2i(32, 64)

const block_component = preload(\"res://components/block.tscn\")
const stone = preload(\"res://blocks/Stone.tres\")

@onready var noise_visual: Sprite2D = $NoiseVisual

var blocks : Dictionary[Vector2i, BlockInstance]
var noise : NoiseTexture2D
var rng := RandomNumberGenerator.new()

func _ready() -> void:
	if !ore_to_test:
		printerr(\"No ore selected.\")
		return
	
	await get_tree().process_frame
	
	prepare_noise()
	update_gen()
	create_texture()

func update_gen() -> void:
	free_previous()
	generate_ore()

func generate_ore() -> void:
	for y in size.y:
		for x in range(0, size.x * 2):
			var pos = Vector2i(x,y)
			var ramp = ore_to_test.Ramp
			var val = ramp.sample(float(pos.y) / size.y).a
			
			if val < rng.randf():
				continue
			
			val = noise.get_image().get_pixel(x,y).a
			
			if val > rng.randf():
				if !blocks.has(Vector2i(x - size.x,y)):
					create_block(x - size.x,y).set_template(ore_to_test)
				else:
					blocks[Vector2i(x - size.x,y)].set_template(ore_to_test)

func prepare_noise() -> void:
	if !ore_to_test.NoiseGen:
		ore_to_test.NoiseGen = NoiseTexture2D.new()
		ore_to_test.NoiseGen.noise = FastNoiseLite.new()
	
	if !ore_to_test.NoiseGen.color_ramp:
		ore_to_test.NoiseGen.color_ramp = Gradient.new()
		ore_to_test.NoiseGen.color_ramp.set_color(0, Color(1,1,1,0))
	
	noise = ore_to_test.NoiseGen
	noise.height = size.y
	noise.width = size.x * 2

func generate_blocks() -> void:
	for y in size.y+1:
		for x in range(-size.x, size.x+1):
			var instance = block_component.instantiate()
			add_child(instance)
			instance.position = Vector2(x*16,y*16)
			blocks[Vector2i(x,y)] = instance

func create_block(x: int, y: int) -> BlockInstance:
	var instance = block_component.instantiate()
	add_child(instance)
	instance.position = Vector2(x*16,y*16)
	blocks[Vector2i(x,y)] = instance
	instance.reveal()
	return instance

func create_texture() -> void:
	noise_visual.texture = ore_to_test.NoiseGen
	noise_visual.position.y = size.y / 2 * 16
	noise_visual.scale = Vector2(16,16)
	
	noise.changed.connect(update_gen)

func free_previous() -> void:
	for pos in blocks:
		var ore = blocks[pos]
		ore.queue_free()
	blocks.clear()

func _exit_tree() -> void:
	if noise:
		if noise.changed.is_connected(update_gen):
			noise.changed.disconnect(update_gen)
"

[sub_resource type="Gradient" id="Gradient_ud7q6"]
colors = PackedColorArray(1, 1, 1, 0, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_i7x3i"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_af3ny"]
width = 64
height = 64
noise = SubResource("FastNoiseLite_i7x3i")
color_ramp = SubResource("Gradient_ud7q6")

[node name="TestOreGen" type="Node2D"]
script = SubResource("GDScript_n2hss")
ore_to_test = ExtResource("1_ud7q6")

[node name="NoiseVisual" type="Sprite2D" parent="."]
z_index = 1
position = Vector2(0, 512)
scale = Vector2(16, 16)
texture = SubResource("NoiseTexture2D_af3ny")

[node name="TextureRect" type="TextureRect" parent="."]
offset_left = -1032.0
offset_right = 1024.0
offset_bottom = 2048.0
texture = ExtResource("2_ud7q6")
stretch_mode = 1
